{"version":3,"sources":["services/deckServices.js","services/cardServices.js","reducers/deckReducer.js","reducers/newCardReducer.js","reducers/cardModReducer.js","reducers/newDeckReducer.js","store.js","components/CardDisplayModal.js","components/UserCard.js","components/NewCardModal.js","components/Deck.js","components/NewDeckModal.js","components/Decks.js","App.js","index.js"],"names":["baseUrl","a","axios","get","res","data","obj","post","id","delete","getAll","addDeck","deleteDeck","cardId","put","createCard","removeCard","updateCard","deckReducer","state","action","type","content","newDeck","filter","deck","deckId","newCard","changedDeck","find","d","cards","push","map","card","changedCard","initialState","title","description","tasks","newCardReducer","desc","cardModReducer","newDeckReducer","reducer","combineReducers","decks","cardMod","store","createStore","composeWithDevTools","applyMiddleware","thunk","mapDispatchToProps","removeCardFromDeck","dispatch","cardServices","initCardMod","modTitle","modDesc","modCard","clearCardMod","connect","props","useState","modifyTitle","setModifyTitle","modifyDesc","setModifyDesc","show","hide","hideModal","setInitialState","submitModification","Modal","onHide","onSubmit","Header","closeButton","onClick","value","onChange","target","Body","style","width","height","Footer","Button","variant","UserCard","showCardDisplay","setShowCardDisplay","Card","Text","updateCardTitle","updateCardDescription","clearCardForm","addCardToDeck","event","preventDefault","Title","placeholder","Deck","header","delDeck","cbIsHovered","setCbIsHovered","ncIsHovered","setNcIsHovered","showNewCardModal","setShowNewCardModal","newCardBtnHover","color","backgroundColor","rmDeckBtnHover","fontWeight","fontSize","key","onMouseEnter","onMouseLeave","viewBox","className","fill","xmlns","fillRule","updateDeckTitle","clearDeckForm","addNewDeck","deckServices","removeDeck","bIsHovered","setBIsHovered","showNewDeckModal","setShowNewDeckModal","addButtonStyles","handleRemoveDeck","deckTitle","window","confirm","CardDeck","as","initializeDecks","useEffect","Container","fluid","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15b18ec3.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = 'api/decks';\n\nasync function getAll() {\n  const res = await axios.get(baseUrl);\n  return res.data;\n}\n\nasync function addDeck(obj) {\n  const res = await axios.post(baseUrl, obj);\n  return res.data;\n}\n\nasync function deleteDeck(id) {\n  return await axios.delete(`${baseUrl}/${id}`);\n}\n\nexport default {\n  getAll,\n  addDeck,\n  deleteDeck,\n};\n","import axios from 'axios';\nconst baseUrl = '/api/cards';\n\nasync function getAll() {\n  const res = await axios.get(baseUrl);\n  return res.data;\n}\n\nasync function createCard(obj) {\n  const res = await axios.post(baseUrl, obj);\n  return res.data;\n}\n\nasync function removeCard(cardId) {\n  return await axios.delete(`${baseUrl}/${cardId}`);\n}\n\nasync function updateCard(id, obj) {\n  const res = await axios.put(`${baseUrl}/${id}`, obj);\n  return res.data;\n}\n\nexport default {\n  getAll,\n  createCard,\n  removeCard,\n  updateCard,\n};\n","import deckServices from '../services/deckServices';\nimport cardServices from '../services/cardServices';\n\nconst deckReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'INIT_DECKS':\n      return action.content;\n\n    case 'ADD_NEW_DECK':\n      return [...state, action.newDeck];\n\n    case 'REMOVE_DECK':\n      return state.filter(deck => deck.id !== action.deckId);\n\n    case 'ADD_CARD_TO_DECK': {\n      const { deckId, newCard } = action;\n      const changedDeck = state.find(d => d.id === deckId);\n      changedDeck.cards.push(newCard);\n      return state.map(deck => deck.id ===  deckId ? changedDeck : deck);\n    }\n\n    case 'REMOVE_CARD_FROM_DECK': {\n      const { cardId, deckId } = action;\n      const changedDeck = state.find(d => d.id === deckId);\n      changedDeck.cards = changedDeck.cards.filter(card => card.id !== cardId);\n      return state.map(deck => deck.id ===  deckId ? changedDeck : deck);\n    }\n\n    case 'MOD_CARD': {\n      const { cardId, deckId, changedCard } = action;\n      const changedDeck = state.find(d => d.id === deckId);\n      changedDeck.cards = changedDeck.cards.map(card => card.id === cardId ? changedCard : card);\n      return state.map(deck => deck.id === deckId ? changedDeck : deck);\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport function initializeDecks() {\n  return async dispatch => {\n    const content = await deckServices.getAll();\n    dispatch({\n      type: 'INIT_DECKS',\n      content\n    });\n  };\n}\n\nexport function addNewDeck(deck) {\n  return async dispatch => {\n    const newDeck = await deckServices.addDeck(deck);\n    dispatch({\n      type: 'ADD_NEW_DECK',\n      newDeck\n    });\n  };\n}\n\nexport function removeDeck(deckId) {\n  return async dispatch => {\n    await deckServices.deleteDeck(deckId);\n    dispatch({\n      type: 'REMOVE_DECK',\n      deckId\n    });\n  };\n}\n\nexport function addCardToDeck(card, deckId) {\n  return async dispatch => {\n    const newCard = await cardServices.createCard(card);\n    dispatch({\n      type: 'ADD_CARD_TO_DECK',\n      newCard,\n      deckId\n    });\n  };\n}\n\nexport function removeCardFromDeck(cardId, deckId) {\n  return async dispatch => {\n    await cardServices.removeCard(cardId);\n    dispatch({\n      type: 'REMOVE_CARD_FROM_DECK',\n      cardId,\n      deckId\n    });\n  };\n}\n\nexport function modCard(card, cardId, deckId) {\n  return async dispatch => {\n    const changedCard = await cardServices.updateCard(cardId, card);\n    dispatch({\n      type: 'MOD_CARD',\n      changedCard,\n      cardId,\n      deckId\n    });\n  };\n}\n\nexport default deckReducer;\n","const initialState = {\n  title: '',\n  description: '',\n  tasks: []\n};\n\nconst newCardReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case 'CARD_TITLE':\n      return { ...state, title: action.title };\n    case 'CARD_DESC':\n      return { ...state, description: action.desc };\n      // need a to add a solution for managing tasks\n    case 'CLEAR_CARD_FORM':\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport function updateCardTitle(title) {\n  return dispatch => {\n    dispatch({\n      type: 'CARD_TITLE',\n      title\n    });\n  };\n}\n\n\nexport function updateCardDescription(desc) {\n  return dispatch => {\n    dispatch({\n      type: 'CARD_DESC',\n      desc\n    });\n  };\n}\n\nexport function clearCardForm() {\n  return dispatch => {\n    dispatch({\n      type: 'CLEAR_CARD_FORM'\n    });\n  };\n}\n\nexport default newCardReducer;\n","const initialState = {\n  title: '',\n  description: '',\n  tasks: []\n};\n\nconst cardModReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case 'INIT_CARD_MOD':\n      return {\n        title: action.title,\n        description: action.desc,\n        tasks: action.tasks\n      };\n    case 'MOD_TITLE':\n      return { ...state, title: action.title };\n    case 'MOD_DESC':\n      return { ...state, description: action.desc };\n    case 'CLEAR_CARD_MOD':\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport function initCardMod(title, desc, tasks) {\n  return dispatch => {\n    dispatch({\n      type: 'INIT_CARD_MOD',\n      title,\n      desc,\n      tasks\n    });\n  };\n}\n\nexport function modTitle(title) {\n  return dispatch => {\n    dispatch({\n      type: 'MOD_TITLE',\n      title\n    });\n  };\n}\n\nexport function modDesc(desc) {\n  return dispatch => {\n    dispatch({\n      type: 'MOD_DESC',\n      desc\n    });\n  };\n}\n\nexport function clearCardMod() {\n  return dispatch => {\n    dispatch({\n      type: 'CLEAR_CARD_MOD'\n    });\n  };\n}\n\nexport default cardModReducer;","const newDeckReducer = (state = '', action) => {\n  switch(action.type) {\n    case 'DECK_TITLE':\n      return action.title;\n    case 'CLEAR_DECK_FORM':\n      return '';\n    default:\n      return state;\n  }\n};\n\nexport function updateDeckTitle(title) {\n  return dispatch => {\n    dispatch({\n      type: 'DECK_TITLE',\n      title\n    });\n  };\n}\n\nexport function clearDeckForm() {\n  return dispatch => {\n    dispatch({\n      type: 'CLEAR_DECK_FORM'\n    });\n  };\n}\n\nexport default newDeckReducer;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport deckReducer from './reducers/deckReducer';\nimport newCardReducer from './reducers/newCardReducer';\nimport cardModReducer from './reducers/cardModReducer';\nimport newDeckReducer from './reducers/newDeckReducer';\n\nconst reducer = combineReducers({\n  decks: deckReducer,\n  newCard: newCardReducer,\n  cardMod: cardModReducer,\n  newDeck: newDeckReducer\n});\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n);\n\nexport default store;\n","import React, { useState } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\n\nimport { removeCardFromDeck, modCard } from '../reducers/deckReducer';\nimport {\n  initCardMod,\n  modTitle,\n  modDesc ,\n  clearCardMod\n} from '../reducers/cardModReducer';\n\nconst CardDisplayModal = (props) => {\n  const [modifyTitle, setModifyTitle] = useState(false);\n  const [modifyDesc, setModifyDesc] = useState(false);\n\n  // read in card info from UserCard\n  const { show, hide, data } = props;\n  // get card data from redux\n  const { title, description, tasks } = props.cardMod;\n\n  function hideModal() {\n    hide();\n    setModifyTitle(false);\n    setModifyDesc(false);\n    props.clearCardMod();\n  }\n\n  function deleteCard() {\n    props.removeCardFromDeck(data.cardId, data.deckId);\n    hide();\n  }\n\n  function setInitialState() {\n    props.initCardMod(\n      modifyTitle ? title : data.title,\n      modifyDesc ? description : data.description,\n      data.tasks\n    );\n  }\n\n  function enableDescMod() {\n    setInitialState();\n    setModifyDesc(true);\n  }\n\n  function enableTitleMod() {\n    setInitialState();\n    setModifyTitle(true);\n  }\n\n  function submitModification() {\n    const changedCard = {\n      title,\n      description,\n      tasks,\n      id: data.cardId\n    };\n\n    props.modCard(changedCard, data.cardId, data.deckId);\n    setModifyTitle(false);\n    setModifyDesc(false);\n    hide();\n    props.clearCardMod();\n  }\n\n  return (\n    <Modal show={show} onHide={hideModal}>\n      <form onSubmit={submitModification}>\n        <Modal.Header closeButton>\n          <div onClick={enableTitleMod}>\n            {modifyTitle\n              ? <input\n                value={title}\n                onChange={({ target }) => props.modTitle(target.value)}\n              />\n              : <strong>{data.title}</strong>}\n          </div>\n        </Modal.Header>\n        <Modal.Body>\n          <div onClick={enableDescMod}>\n            <div>\n              <p><strong>Description:</strong></p>\n\n              {\n                modifyDesc || data.description === ''\n                  ? <textarea\n                    value={description}\n                    onChange={({ target }) => props.modDesc(target.value)}\n                    style={{ width: '80%', height: '5rem' }}\n                  />\n                  : <p>{data.description}</p>\n              }\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant='secondary' onClick={hideModal}>\n          Close\n          </Button>\n          <Button variant='danger' onClick={deleteCard}>Remove</Button>\n          <Button variant='primary' onClick={submitModification}>\n            Change\n          </Button>\n        </Modal.Footer>\n      </form>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    cardMod: state.cardMod\n  };\n};\n\nconst mapDispatchToProps = {\n  removeCardFromDeck,\n  initCardMod,\n  modTitle,\n  modDesc,\n  modCard,\n  clearCardMod\n};\n\nexport default connect (\n  mapStateToProps,\n  mapDispatchToProps\n)(CardDisplayModal);\n","import React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDisplayModal from './CardDisplayModal';\nimport './styles.css';\n\nconst UserCard = ({ title, description, cardId, deckId }) => {\n  const [showCardDisplay, setShowCardDisplay] = useState(false);\n\n  const handleCardShow = () => setShowCardDisplay(true);\n  const handleCardHide = () => setShowCardDisplay(false);\n\n  return (\n    <div>\n      <Card\n        id='userCard'\n        onClick={handleCardShow}\n      >\n        <Card.Body>\n          <Card.Text>\n            <strong>{title}</strong>\n          </Card.Text>\n          <Card.Text>\n            {description}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n      <br/>\n      <CardDisplayModal\n        show={showCardDisplay}\n        hide={handleCardHide}\n        data={{\n          title,\n          description,\n          cardId,\n          deckId\n        }}\n      />\n    </div>\n  );\n};\n\nexport default UserCard;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nimport {\n  updateCardTitle,\n  updateCardDescription,\n  clearCardForm\n} from '../reducers/newCardReducer';\n\nimport { addCardToDeck } from '../reducers/deckReducer';\n\nconst NewCardModal = (props) => {\n\n  const { title, description, tasks } = props.newCard;\n\n  function hideModal() {\n    props.hide();\n    props.clearCardForm();\n  }\n\n  function addCard(event) {\n    event.preventDefault();\n    const newCard = {\n      title,\n      description,\n      tasks: [],\n      deck: props.deckId\n    };\n\n    props.addCardToDeck(newCard, props.deckId);\n    props.clearCardForm();\n    props.hide();\n  }\n\n  return (\n    <Modal show={props.show} onHide={hideModal}>\n      <form onSubmit={addCard}>\n        <Modal.Header closeButton>\n          <Modal.Title>New Card</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <input\n            value={title}\n            placeholder='Enter a title...'\n            onChange={({ target }) => props.updateCardTitle(target.value)}\n          />\n          <br/>\n          <br/>\n          <textarea\n            value={description}\n            placeholder='Description...'\n            onChange={({ target }) => props.updateCardDescription(target.value)}\n            style={{ width: '80%', height: '5rem' }}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant='secondary' onClick={hideModal}>\n          Close\n          </Button>\n          <Button variant='primary' type='submit'>Add</Button>\n        </Modal.Footer>\n      </form>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    newCard: state.newCard\n  };\n};\n\nconst mapDispatchToProps = {\n  updateCardTitle,\n  updateCardDescription,\n  clearCardForm,\n  addCardToDeck\n};\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NewCardModal);\n","import React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport UserCard from './UserCard';\nimport NewCardModal from './NewCardModal';\nimport './styles.css';\n\n// read in deck card info\nconst Deck = ({ header, cards, deckId, delDeck }) => {\n  const [cbIsHovered, setCbIsHovered] = useState(false);\n  const [ncIsHovered, setNcIsHovered] = useState(false);\n  const [showNewCardModal, setShowNewCardModal] = useState(false);\n\n  const newCardBtnHover = {\n    color: cbIsHovered ? 'black' : 'grey',\n    backgroundColor: cbIsHovered ? 'grey' : '#f1f1f1'\n  };\n\n  const rmDeckBtnHover = {\n    color: ncIsHovered ? 'black' : 'grey',\n    backgroundColor: ncIsHovered ? 'grey' : '#f1f1f1'\n  };\n\n  const handleModalShow = () => setShowNewCardModal(true);\n  const handleModalClose = () => setShowNewCardModal(false);\n\n  if (!cards) {\n    return <div></div>;\n  }\n\n  return (\n    <div>\n      <Card\n        style={{\n          backgroundColor: '#f1f1f1' ,\n          width: '20rem'\n        }}\n      >\n        <Card.Body>\n          <Card.Text\n            style={{\n              fontWeight: 'bold',\n              fontSize: '14pt'\n            }}\n          >\n            {header}\n          </Card.Text>\n\n          {cards.map(card =>\n            <UserCard\n              key={card.id}\n              title={card.title}\n              description={card.description}\n              cardId={card.id}\n              deckId={deckId}\n            />\n          )}\n\n          <Card.Text>\n            <Button\n              id='new-card-button'\n              variant='light'\n              onClick={handleModalShow}\n              style={newCardBtnHover}\n\n              onMouseEnter={() => setCbIsHovered(true)}\n              onMouseLeave={() => setCbIsHovered(false)}\n            >\n              + Add another card\n            </Button>\n            <Button\n              id='rm-deck-btn'\n              style={rmDeckBtnHover}\n              onMouseEnter={() => setNcIsHovered(true)}\n              onMouseLeave={() => setNcIsHovered(false)}\n              onClick={() => delDeck(deckId)}\n            >\n              <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n                <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n              </svg>\n            </Button>\n          </Card.Text>\n\n        </Card.Body>\n      </Card>\n\n      <NewCardModal show={showNewCardModal} hide={handleModalClose} deckId={deckId}/>\n    </div>\n  );\n};\n\nexport default Deck;","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\nimport { updateDeckTitle, clearDeckForm } from '../reducers/newDeckReducer';\nimport { addNewDeck } from '../reducers/deckReducer';\n\nconst NewDeckModal = (props) => {\n  const { show, hide, newDeck } = props;\n\n  function hideModal() {\n    props.clearDeckForm();\n    hide();\n  }\n\n  function addDeck(event) {\n    event.preventDefault();\n    const deck = {\n      title: newDeck\n    };\n\n    props.addNewDeck(deck);\n    hideModal();\n  }\n\n  return (\n    <Modal show={show} onHide={hideModal}>\n      <form onSubmit={addDeck}>\n        <Modal.Header closeButton>\n          <Modal.Title>\n          New Deck\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <input\n            placeholder='Enter a title...'\n            style={{ width: '80%' }}\n            value={newDeck}\n            onChange={({ target }) => props.updateDeckTitle(target.value)}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant='secondary' onClick={hideModal}>\n              Close\n          </Button>\n          <Button variant='primary' type='submit'>Add</Button>\n        </Modal.Footer>\n      </form>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    newDeck: state.newDeck\n  };\n};\n\nconst mapDispatchToProps = {\n  updateDeckTitle,\n  clearDeckForm,\n  addNewDeck\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NewDeckModal);","import React, { useState } from 'react';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\nimport Deck from './Deck';\nimport NewDeckModal from './NewDeckModal';\nimport './styles.css';\n\nimport { removeDeck } from '../reducers/deckReducer';\n\nconst Decks = (props) => {\n  const [bIsHovered, setBIsHovered] = useState(false);\n  const [showNewDeckModal, setShowNewDeckModal] = useState(false);\n\n  const handleModalShow = () => setShowNewDeckModal(true);\n  const handleModalClose = () => setShowNewDeckModal(false);\n\n  const addButtonStyles = {\n    backgroundColor: bIsHovered ? '#08d2f1' : '#04c2e0',\n  };\n\n  function handleRemoveDeck(deckId) {\n    const deckTitle = props.decks.find(deck => deck.id === deckId).title;\n    if (window.confirm(`Delete ${deckTitle} and all its cards?`)) {\n      props.removeDeck(deckId);\n    }\n  }\n\n  return (\n    <CardDeck as='div'>\n      {props.decks.map(deck =>\n        <Deck\n          key={deck.id}\n          cards={deck.cards}\n          header={deck.title}\n          deckId={deck.id}\n          delDeck={handleRemoveDeck}\n        />\n      )}\n      <Button\n        id='add-deck-button'\n        style={addButtonStyles}\n        onMouseEnter={() => setBIsHovered(true)}\n        onMouseLeave={() => setBIsHovered(false)}\n        onClick={handleModalShow}\n      >\n        + Add Deck\n      </Button>\n      <NewDeckModal show={showNewDeckModal} hide={handleModalClose}/>\n    </CardDeck>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    decks: state.decks\n  };\n};\n\nconst mapDispatchToProps = {\n  removeDeck\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Decks);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport Decks from './components/Decks';\n\nimport { initializeDecks } from './reducers/deckReducer';\n\nconst App = (props) => {\n\n  useEffect(() => {\n    props.initializeDecks();\n  }, []);\n\n  return (\n    <Container fluid>\n      <Decks />\n    </Container>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    decks: state.decks,\n  };\n};\n\nconst mapDispatchToProps = {\n  initializeDecks\n};\n\nexport default connect (\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport store from './store.js';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}