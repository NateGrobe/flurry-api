{"version":3,"sources":["services/deckServices.js","services/cardServices.js","reducers/deckReducer.js","reducers/newCardReducer.js","reducers/cardModReducer.js","store.js","components/CardDisplayModal.js","components/UserCard.js","components/NewCardModal.js","components/Deck.js","components/Decks.js","App.js","index.js"],"names":["a","axios","get","res","data","getAll","obj","post","cardId","delete","id","put","createCard","removeCard","updateCard","deckReducer","state","action","type","content","deckId","newCard","changedDeck","find","d","cards","push","map","deck","filter","card","changedCard","initialState","title","description","tasks","newCardReducer","desc","cardModReducer","reducer","combineReducers","decks","cardMod","store","createStore","composeWithDevTools","applyMiddleware","thunk","mapDispatchToProps","removeCardFromDeck","dispatch","cardServices","initCardMod","modTitle","modDesc","modCard","connect","props","useState","modifyTitle","setModifyTitle","modifyDesc","setModifyDesc","show","hide","hideModal","setInitialState","submitModification","Modal","onHide","onSubmit","Header","closeButton","onClick","value","onChange","target","Body","Footer","Button","variant","UserCard","showCardDisplay","setShowCardDisplay","Card","Text","updateTitle","updateDescription","clearCardForm","addCardToDeck","event","preventDefault","Title","placeholder","style","width","height","Deck","header","cbIsHovered","setCbIsHovered","showNewCardModal","setShowNewCardModal","addCardButtonStyles","color","textAlign","border","backgroundColor","fontWeight","fontSize","key","onMouseEnter","onMouseLeave","CardDeck","as","initializeDecks","deckServices","useEffect","Container","fluid","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1532898f.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = 'api/decks';\n\nasync function getAll() {\n  const res = await axios.get(baseUrl);\n  return res.data;\n}\n\nexport default {\n  getAll,\n};\n","import axios from 'axios';\nconst baseUrl = '/api/cards';\n\nasync function getAll() {\n  const res = await axios.get(baseUrl);\n  return res.data;\n}\n\nasync function createCard(obj) {\n  const res = await axios.post(baseUrl, obj);\n  return res.data;\n}\n\nasync function removeCard(cardId) {\n  return await axios.delete(`${baseUrl}/${cardId}`);\n}\n\nasync function updateCard(id, obj) {\n  const res = await axios.put(`${baseUrl}/${id}`, obj);\n  return res.data;\n}\n\nexport default { \n  getAll,\n  createCard,\n  removeCard,\n  updateCard,\n};\n","import deckServices from '../services/deckServices';\nimport cardServices from '../services/cardServices';\n\nconst deckReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'INIT_DECKS':\n      return action.content;\n    case 'ADD_CARD_TO_DECK': {\n      const { deckId, newCard } = action;\n      const changedDeck = state.find(d => d.id === deckId);\n      changedDeck.cards.push(newCard);\n      return state.map(deck => deck.id ===  deckId ? changedDeck : deck);\n    }\n    case 'REMOVE_CARD_FROM_DECK': {\n      const { cardId, deckId } = action;\n      const changedDeck = state.find(d => d.id === deckId);\n      changedDeck.cards = changedDeck.cards.filter(card => card.id !== cardId);\n      return state.map(deck => deck.id ===  deckId ? changedDeck : deck);\n    }\n    case 'MOD_CARD': {\n      const { cardId, deckId, changedCard } = action;\n      const changedDeck = state.find(d => d.id === deckId);\n      changedDeck.cards = changedDeck.cards.map(card => card.id === cardId ? changedCard : card);\n      return state.map(deck => deck.id === deckId ? changedDeck : deck);\n    }\n    default:\n      return state;\n  }\n};\n\nexport function initializeDecks() {\n  return async dispatch => {\n    const content = await deckServices.getAll();\n    dispatch({\n      type: 'INIT_DECKS',\n      content\n    });\n  };\n}\n\nexport function addCardToDeck(card, deckId) {\n  return async dispatch => {\n    const newCard = await cardServices.createCard(card);\n    dispatch({\n      type: 'ADD_CARD_TO_DECK',\n      newCard,\n      deckId\n    });\n  };\n}\n\nexport function removeCardFromDeck(cardId, deckId) {\n  return async dispatch => {\n    await cardServices.removeCard(cardId);\n    dispatch({\n      type: 'REMOVE_CARD_FROM_DECK',\n      cardId,\n      deckId\n    });\n  };\n}\n\nexport function modCard(card, cardId, deckId) {\n  return async dispatch => {\n    const changedCard = await cardServices.updateCard(cardId, card);\n    dispatch({\n      type: 'MOD_CARD',\n      changedCard,\n      cardId,\n      deckId\n    });\n  };\n}\n\nexport default deckReducer;\n","const initialState = {\n  title: '',\n  description: '',\n  tasks: []\n};\n\nconst newCardReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case 'CARD_TITLE':\n      return { ...state, title: action.title };\n    case 'CARD_DESC':\n      return { ...state, description: action.desc };\n      // need a to add a solution for managing tasks\n    case 'CLEAR_CARD_FORM':\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport function updateTitle(title) {\n  return dispatch => {\n    dispatch({\n      type: 'CARD_TITLE',\n      title\n    });\n  };\n}\n\n\nexport function updateDescription(desc) {\n  return dispatch => {\n    dispatch({\n      type: 'CARD_DESC',\n      desc\n    });\n  };\n}\n\nexport function clearCardForm() {\n  return dispatch => {\n    dispatch({\n      type: 'CLEAR_CARD_FORM'\n    });\n  };\n}\n\nexport default newCardReducer;\n","const initialState = {\n    title: '',\n    description: '',\n    tasks: []\n};\n\nconst cardModReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'INIT_CARD_MOD':\n            return {\n                title: action.title,\n                description: action.desc,\n                tasks: action.tasks\n            };\n        case 'MOD_TITLE':\n            return { ...state, title: action.title };\n        case 'MOD_DESC':\n            return { ...state, description: action.desc };\n        default:\n            return state;\n    }\n}\n\nexport function initCardMod(title, desc, tasks) {\n    return dispatch => {\n        dispatch({\n            type: 'INIT_CARD_MOD',\n            title,\n            desc,\n            tasks\n        });\n    };\n}\n\nexport function modTitle(title) {\n    return dispatch => {\n        dispatch({\n            type: 'MOD_TITLE',\n            title\n        });\n    };\n}\n\nexport function modDesc(desc) {\n    return dispatch => {\n        dispatch({\n            type: 'MOD_DESC',\n            desc\n        });\n    };\n}\n\nexport default cardModReducer;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport deckReducer from './reducers/deckReducer';\nimport newCardReducer from './reducers/newCardReducer';\nimport cardModReducer from './reducers/cardModReducer';\n\nconst reducer = combineReducers({\n  decks: deckReducer,\n  newCard: newCardReducer,\n  cardMod: cardModReducer,\n});\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n);\n\nexport default store;\n","import React, { useState } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\n\nimport { removeCardFromDeck, modCard } from '../reducers/deckReducer';\nimport { initCardMod, modTitle, modDesc } from '../reducers/cardModReducer';\n\nconst CardDisplayModal = (props) => {\n  const [modifyTitle, setModifyTitle] = useState(false);\n  const [modifyDesc, setModifyDesc] = useState(false);\n\n  // read in card info from UserCard\n  const { show, hide, data } = props;\n  // get card data from redux\n  const { title, description, tasks } = props.cardMod;\n\n  function hideModal() {\n    hide();\n    setModifyTitle(false);\n    setModifyDesc(false);\n  }\n\n  function deleteCard() {\n    props.removeCardFromDeck(data.cardId, data.deckId);\n    hide();\n  }\n\n  function setInitialState() {\n    props.initCardMod(\n        modifyTitle ? title : data.title,\n        modifyDesc ? description : data.description,\n        data.tasks\n      );\n  }\n\n  function enableDescMod() {\n    setInitialState();\n    setModifyDesc(true);\n  }\n\n  function enableTitleMod() {\n    setInitialState();\n    setModifyTitle(true);\n  }\n\n  function submitModification() {\n    const changedCard = {\n      title,\n      description,\n      tasks,\n      id: data.cardId\n    };\n\n    props.modCard(changedCard, data.cardId, data.deckId);\n    setModifyTitle(false);\n    setModifyDesc(false);\n    hide();\n  }\n\n  return (\n    <Modal show={show} onHide={hideModal}>\n      <form onSubmit={submitModification}>\n        <Modal.Header closeButton>\n          <div onClick={enableTitleMod}>\n            {modifyTitle\n              ? <input \n                value={title}\n                onChange={({ target }) => props.modTitle(target.value)}\n              />\n              : data.title}\n            </div>\n        </Modal.Header>\n        <Modal.Body>\n          <div onClick={enableDescMod}>\n            {modifyDesc\n              ? <input\n                value={description}\n                onChange={({ target }) => props.modDesc(target.value)}\n              />\n              : data.description}\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant='secondary' onClick={hideModal}>\n          Close\n          </Button>\n          <Button variant='danger' onClick={deleteCard}>Remove</Button>\n          <Button variant='primary' onClick={submitModification}>\n            Change\n          </Button>\n        </Modal.Footer>\n      </form>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    cardMod: state.cardMod\n  };\n}\n\nconst mapDispatchToProps = {\n  removeCardFromDeck,\n  initCardMod,\n  modTitle,\n  modDesc,\n  modCard\n};\n\nexport default connect (\n  mapStateToProps,\n  mapDispatchToProps\n)(CardDisplayModal);\n","import React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDisplayModal from './CardDisplayModal';\nimport './styles.css';\n\nconst UserCard = ({ title, description, cardId, deckId }) => {\n  const [showCardDisplay, setShowCardDisplay] = useState(false);\n\n  const handleCardShow = () => setShowCardDisplay(true);\n  const handleCardHide = () => setShowCardDisplay(false);\n\n  return (\n    <div>\n      <Card\n        id='userCard'\n        onClick={handleCardShow}\n      >\n        <Card.Body>\n          <Card.Text>\n            <strong>{title}</strong>\n          </Card.Text>\n          <Card.Text>\n            {description}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n      <br/>\n      <CardDisplayModal\n        show={showCardDisplay}\n        hide={handleCardHide}\n        data={{\n          title,\n          description,\n          cardId,\n          deckId\n        }}\n      />\n    </div>\n  );\n};\n\nexport default UserCard;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nimport {\n  updateTitle,\n  updateDescription,\n  clearCardForm\n} from '../reducers/newCardReducer';\n\nimport { addCardToDeck } from '../reducers/deckReducer';\n\nconst NewCardModal = (props) => {\n\n  const { title, description, tasks } = props.newCard;\n\n  function hideModal() {\n    props.hide();\n    props.clearCardForm();\n  }\n\n  function addCard(event) {\n    event.preventDefault();\n    const newCard = {\n      title,\n      description,\n      tasks: [],\n      deck: props.deckId\n    };\n\n    props.addCardToDeck(newCard, props.deckId);\n    props.clearCardForm();\n    props.hide();\n  }\n\n  return (\n    <Modal show={props.show} onHide={hideModal}>\n      <form onSubmit={addCard}>\n        <Modal.Header closeButton>\n          <Modal.Title>New Card</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <input\n            value={title}\n            placeholder='Enter a title...'\n            onChange={({ target }) => props.updateTitle(target.value)}\n          />\n          <br/>\n          <br/>\n          <textarea\n            value={description}\n            placeholder='Description...'\n            onChange={({ target }) => props.updateDescription(target.value)}\n            style={{ width: '80%', height: '5rem' }}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant='secondary' onClick={hideModal}>\n          Close\n          </Button>\n          <Button variant='primary' type='submit'>Add</Button>\n        </Modal.Footer>\n      </form>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    newCard: state.newCard\n  };\n};\n\nconst mapDispatchToProps = {\n  updateTitle,\n  updateDescription,\n  clearCardForm,\n  addCardToDeck\n};\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NewCardModal);\n","import React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport UserCard from './UserCard';\nimport NewCardModal from './NewCardModal';\n\n// read in deck card info\nconst Deck = ({ header, cards, deckId }) => {\n  const [cbIsHovered, setCbIsHovered] = useState(false);\n  const [showNewCardModal, setShowNewCardModal] = useState(false);\n\n  const addCardButtonStyles = {\n    color: cbIsHovered ? 'black' : 'grey',\n    width: '100%',\n    textAlign: 'left',\n    border: 'none',\n    backgroundColor: cbIsHovered ? 'grey' : '#f1f1f1'\n  };\n\n  const handleModalShow = () => setShowNewCardModal(true);\n  const handleModalClose = () => setShowNewCardModal(false);\n\n\n  if (!cards) {\n    return <div></div>;\n  }\n\n  return (\n    <div>\n      <Card\n        style={{\n          backgroundColor: '#f1f1f1' ,\n          width: '20rem'\n        }}\n      >\n        <Card.Body>\n          <Card.Text\n            style={{\n              fontWeight: 'bold',\n              fontSize: '14pt'\n            }}\n          >\n            {header}\n          </Card.Text>\n\n          {cards.map(card =>\n            <UserCard\n              key={card.id}\n              title={card.title}\n              description={card.description}\n              cardId={card.id}\n              deckId={deckId}\n            />\n          )}\n\n          <Card.Text>\n            <Button\n              variant='light'\n              onClick={handleModalShow}\n              style={ addCardButtonStyles }\n\n              onMouseEnter={() => setCbIsHovered(true)}\n              onMouseLeave={() => setCbIsHovered(false)}\n            >\n              + Add another card\n            </Button>\n          </Card.Text>\n\n        </Card.Body>\n      </Card>\n\n      <NewCardModal show={showNewCardModal} hide={handleModalClose} deckId={deckId}/>\n    </div>\n  );\n};\n\nexport default Deck;\n","import React from 'react';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport { connect } from 'react-redux';\nimport Deck from './Deck';\n\nconst Decks = (props) => {\n\n  return (\n    <CardDeck as='div'>\n      {props.decks.map(deck =>\n        <Deck\n          key={deck.id}\n          cards={deck.cards}\n          header={deck.title}\n          deckId={deck.id}\n        />\n      )}\n    </CardDeck>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    decks: state.decks\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Decks);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport Decks from './components/Decks';\n\nimport { initializeDecks } from './reducers/deckReducer';\n\nconst App = (props) => {\n\n  useEffect(() => {\n    props.initializeDecks();\n  }, []);\n\n  return (\n    <Container fluid>\n      <Decks />\n    </Container>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    decks: state.decks,\n  };\n};\n\nconst mapDispatchToProps = {\n  initializeDecks\n};\n\nexport default connect (\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport store from './store.js';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}